/* ng-infinite-scroll - v1.0.0 - 2013-02-23 */
var mod;

mod = angular.module('infinite-scroll', []);

mod.directive('infiniteScroll', [
    '$rootScope', '$window', '$timeout',
    function($rootScope, $window, $timeout) {
        return {
            link: function(scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope.$watch(attrs.infiniteScrollDistance, function(value) {
                        return scrollDistance = parseInt(value, 10);
                    });
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope.$watch(attrs.infiniteScrollDisabled, function(value) {
                        scrollEnabled = !value;
                        if (scrollEnabled && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler();
                        }
                    });
                }
                handler = function() {
                    var elementBottom, remaining, shouldScroll, windowBottom, windowTop;
                    windowBottom = $window.height() + $window.scrollTop();
                    elementBottom = elem.offset().top + elem.height();
                    windowTop = $window.scrollTop();
                    remaining = elementBottom - windowBottom;
                    // alert(windowBottom);
                    // alert(elementBottom);
                    // alert(remaining);
                    // alert(windowTop);
                    shouldScroll = remaining <= $window.height() * scrollDistance;
                    shouldRefresh = windowTop == 0;
                    // alert(shouldRefresh);
                    if (shouldScroll && scrollEnabled) {
                        if ($rootScope.$$phase) {
                            return scope.$eval(attrs.infiniteScroll);
                        } else {
                            return scope.$apply(attrs.infiniteScroll);
                        }
                    } else if (shouldScroll) {
                        return checkWhenEnabled = true;
                    }
                    if (shouldRefresh && scrollEnabled) {
                        // alert('shua');
                        if ($rootScope.$$phase) {
                            return scope.$eval(attrs.infiniteScrollRefresh);
                        } else {
                            return $scope.$apply(attrs.infiniteScrollRefresh);
                        }
                    }
                };
                $window.on('scroll', handler);
                // $('body').on('touchstart', function(ev) {
                //     ev.preventDefault();
                // }, false);
                // document.addEventListener('touchmove', function(event) {
                //     if (event.target.parentNode.className.indexOf('noBounce') != -1 || event.target.className.indexOf('noBounce') != -1) {
                //         event.preventDefault();
                //     }
                // }, false);
                // $('body').addEventListener('touchstart', function(e) {
                //     e.preventDefault();
                //     alert('a');
                // }, false);

                // document.addEventListener('touchmove', function(e) {
                //     e.preventDefault();
                //     alert('a');
                // }, false);
                scope.$on('$destroy', function() {
                    return $window.off('scroll', handler);
                });
                return $timeout((function() {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler();
                        }
                    } else {
                        return handler();
                    }
                }), 0);
            }
        };
    }
]);